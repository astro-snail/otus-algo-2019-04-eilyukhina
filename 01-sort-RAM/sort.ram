<input> 10 10 1 9 2 8 3 7 4 6 5
		; r1 - i
		; r2 - k
		; r3 - N
		; r1+3 - rN+3 - numbers to sort
read 3 		; read N
load 3
jz end		; N = 0 - stop

load 3
add =3
store 3		; add number of additional registers to N to avoid subtraction in loops

load =3
store 1

loop_read:		; read numbers to sort
load 1
add =1
store 1

load 1
sub 3
jgtz sort		; check end of loop condition

read *1

jmp loop_read

sort:
load =3		; number of registers to store i, k, N
store 1 		; i = 0 + 3

loop_i: 
load 1		; increment i, loop starts from i = 1 + 3
add =1
store 1

load 1 		; check if i - 3 > N - 1
sub 3
add =1
jgtz output 

load 1
store 2 		; k = i

loop_k: 
load 2		; increment k, loop starts from k = i + 1
add =1
store 2

load 2 		; check if k - 3 > N
sub 3
jgtz loop_i 	

load *1		; compare n(i) and n(k)
sub *2

jgtz swap 		; if n(i) > n(k) - swap them

jmp loop_k		; end of k-loop

output:
load =3
store 1

loop_write:	; output sorted numbers
load 1
add =1
store 1

load 1		; check end of loop condition
sub 3
jgtz end

write *1

jmp loop_write

end:
halt

swap:		; swap a and b
load *1
add *2
store *1		; store a + b in r1

load *1 
sub *2
store *2		; store a + b - b = a in r2

load *1		
sub *2
store *1		; store a + b - a = b in r1

jmp loop_k